# Home Assistant Automation Examples for Bestway Spa
# Add these to your Home Assistant configuration.yaml or automations.yaml

automation:
  # ============================================
  # BASIC AUTOMATIONS
  # ============================================
  
  # Auto-heat for evening use
  - alias: "Spa - Evening Heat Up"
    description: "Start heating the spa at 5 PM if someone is home"
    trigger:
      - platform: time
        at: "17:00:00"
    condition:
      - condition: state
        entity_id: group.family
        state: 'home'
      - condition: numeric_state
        entity_id: sensor.layzspa_water_temperature
        below: 37
    action:
      - service: climate.set_temperature
        target:
          entity_id: climate.layzspa
        data:
          temperature: 38
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: heat
      - service: notify.mobile_app
        data:
          message: "Spa heating started for evening use 🛁"
          title: "Spa Heating"

  # Turn off at night
  - alias: "Spa - Night Shutdown"
    description: "Turn off heating at 11 PM to save energy"
    trigger:
      - platform: time
        at: "23:00:00"
    action:
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: "off"
      - service: switch.turn_off
        target:
          entity_id: 
            - switch.layzspa_filter
            - switch.layzspa_bubbles

  # ============================================
  # MAINTENANCE AUTOMATIONS
  # ============================================
  
  # Daily filter cycles
  - alias: "Spa - Morning Filter Cycle"
    description: "Run filter for 2 hours in the morning"
    trigger:
      - platform: time
        at: "08:00:00"
    action:
      - service: switch.turn_on
        target:
          entity_id: switch.layzspa_filter
      - delay:
          hours: 2
      - service: switch.turn_off
        target:
          entity_id: switch.layzspa_filter

  - alias: "Spa - Evening Filter Cycle"
    description: "Run filter for 2 hours in the evening"
    trigger:
      - platform: time
        at: "20:00:00"
    action:
      - service: switch.turn_on
        target:
          entity_id: switch.layzspa_filter
      - delay:
          hours: 2
      - service: switch.turn_off
        target:
          entity_id: switch.layzspa_filter

  # Weekly maintenance mode
  - alias: "Spa - Weekly Maintenance"
    description: "Run maintenance cycle every Sunday"
    trigger:
      - platform: time
        at: "10:00:00"
      - platform: time
        at: "10:00:00"
    condition:
      - condition: time
        weekday:
          - sun
    action:
      - service: notify.mobile_app
        data:
          message: "Starting weekly spa maintenance cycle"
          title: "Spa Maintenance"
      - service: switch.turn_on
        target:
          entity_id: 
            - switch.layzspa_filter
            - switch.layzspa_bubbles
      - delay:
          minutes: 30
      - service: switch.turn_off
        target:
          entity_id: switch.layzspa_bubbles
      - delay:
          hours: 2
      - service: switch.turn_off
        target:
          entity_id: switch.layzspa_filter
      - service: notify.mobile_app
        data:
          message: "Weekly spa maintenance completed"
          title: "Spa Maintenance"

  # ============================================
  # TEMPERATURE MANAGEMENT
  # ============================================
  
  # Maintain temperature when home
  - alias: "Spa - Maintain Temperature"
    description: "Keep spa at set temperature when someone is home"
    trigger:
      - platform: numeric_state
        entity_id: sensor.layzspa_water_temperature
        below: 36
        for:
          minutes: 10
    condition:
      - condition: state
        entity_id: group.family
        state: 'home'
      - condition: time
        after: "07:00:00"
        before: "23:00:00"
    action:
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: heat

  # Eco mode when away
  - alias: "Spa - Eco Mode When Away"
    description: "Lower temperature when nobody is home"
    trigger:
      - platform: state
        entity_id: group.family
        to: 'not_home'
        for:
          minutes: 30
    action:
      - service: climate.set_preset_mode
        target:
          entity_id: climate.layzspa
        data:
          preset_mode: "Eco"
      - service: notify.mobile_app
        data:
          message: "Spa switched to eco mode - nobody home"
          title: "Spa Eco Mode"

  # Restore temperature when returning
  - alias: "Spa - Restore Temperature When Home"
    description: "Heat spa back up when someone comes home"
    trigger:
      - platform: state
        entity_id: group.family
        to: 'home'
    condition:
      - condition: state
        entity_id: climate.layzspa
        attribute: preset_mode
        state: "Eco"
    action:
      - service: climate.set_preset_mode
        target:
          entity_id: climate.layzspa
        data:
          preset_mode: "Home"
      - service: notify.mobile_app
        data:
          message: "Welcome home! Spa heating back to normal temperature"
          title: "Spa Heating"

  # ============================================
  # SAFETY AUTOMATIONS
  # ============================================
  
  # Temperature too high warning
  - alias: "Spa - High Temperature Warning"
    description: "Alert if spa temperature exceeds 40°C"
    trigger:
      - platform: numeric_state
        entity_id: sensor.layzspa_water_temperature
        above: 40
    action:
      - service: switch.turn_off
        target:
          entity_id: switch.layzspa_heater
      - service: notify.mobile_app
        data:
          message: "⚠️ Spa temperature too high! Heater turned off."
          title: "Spa Safety Alert"
          data:
            priority: high
            tag: spa_safety

  # Error notification
  - alias: "Spa - Error Notification"
    description: "Notify when spa reports an error"
    trigger:
      - platform: state
        entity_id: binary_sensor.layzspa_error_state
        to: 'on'
    action:
      - service: notify.mobile_app
        data:
          message: "Spa error detected: {{ states('sensor.layzspa_error_code') }}"
          title: "Spa Error"
          data:
            priority: high
            tag: spa_error

  # Freeze protection
  - alias: "Spa - Freeze Protection"
    description: "Prevent freezing in cold weather"
    trigger:
      - platform: numeric_state
        entity_id: sensor.outdoor_temperature  # Assuming you have an outdoor sensor
        below: 2
    condition:
      - condition: numeric_state
        entity_id: sensor.layzspa_water_temperature
        below: 10
    action:
      - service: climate.set_temperature
        target:
          entity_id: climate.layzspa
        data:
          temperature: 15
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: heat
      - service: switch.turn_on
        target:
          entity_id: switch.layzspa_filter
      - service: notify.mobile_app
        data:
          message: "⚠️ Freeze protection activated for spa"
          title: "Spa Freeze Protection"

  # ============================================
  # ENERGY SAVING AUTOMATIONS
  # ============================================
  
  # Off-peak heating
  - alias: "Spa - Off-Peak Heating"
    description: "Heat during off-peak electricity hours"
    trigger:
      - platform: time
        at: "02:00:00"  # Adjust to your off-peak hours
    condition:
      - condition: numeric_state
        entity_id: sensor.layzspa_water_temperature
        below: 35
    action:
      - service: climate.set_temperature
        target:
          entity_id: climate.layzspa
        data:
          temperature: 38
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: heat
      - wait_template: "{{ states('sensor.layzspa_water_temperature') | float >= 38 }}"
        timeout: '04:00:00'
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: "off"

  # Solar excess heating (if you have solar panels)
  - alias: "Spa - Solar Excess Heating"
    description: "Heat spa when excess solar power is available"
    trigger:
      - platform: numeric_state
        entity_id: sensor.solar_excess_power  # Your solar sensor
        above: 2500  # Watts needed for heater
        for:
          minutes: 5
    condition:
      - condition: numeric_state
        entity_id: sensor.layzspa_water_temperature
        below: 40
      - condition: time
        after: "10:00:00"
        before: "16:00:00"
    action:
      - service: climate.set_temperature
        target:
          entity_id: climate.layzspa
        data:
          temperature: 40  # Heat to max while solar is available
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: heat

  # ============================================
  # VOICE ASSISTANT HELPERS
  # ============================================
  
  # Quick heat for voice command
  - alias: "Spa - Quick Heat Voice Command"
    description: "Triggered by 'Hey Google, heat the spa'"
    trigger:
      - platform: event
        event_type: google_assistant_command
        event_data:
          command: "heat the spa"
    action:
      - service: climate.set_temperature
        target:
          entity_id: climate.layzspa
        data:
          temperature: 38
      - service: climate.set_hvac_mode
        target:
          entity_id: climate.layzspa
        data:
          hvac_mode: heat
      - service: switch.turn_on
        target:
          entity_id: switch.layzspa_filter
      - service: tts.google_say
        data:
          entity_id: media_player.google_home
          message: "Spa heating to 38 degrees"

# ============================================
# INPUT HELPERS (add to configuration.yaml)
# ============================================

input_datetime:
  spa_schedule_on:
    name: Spa Schedule On Time
    has_date: false
    has_time: true
    initial: '17:00:00'
  
  spa_schedule_off:
    name: Spa Schedule Off Time
    has_date: false
    has_time: true
    initial: '22:00:00'

input_number:
  spa_eco_temperature:
    name: Spa Eco Temperature
    min: 20
    max: 40
    step: 1
    initial: 35
    unit_of_measurement: '°C'
  
  spa_comfort_temperature:
    name: Spa Comfort Temperature
    min: 20
    max: 40
    step: 1
    initial: 38
    unit_of_measurement: '°C'

input_boolean:
  spa_vacation_mode:
    name: Spa Vacation Mode
    initial: off
  
  spa_guest_mode:
    name: Spa Guest Mode
    initial: off

# ============================================
# TEMPLATE SENSORS (add to configuration.yaml)
# ============================================

sensor:
  - platform: template
    sensors:
      spa_heating_time_today:
        friendly_name: "Spa Heating Time Today"
        unit_of_measurement: 'hours'
        value_template: >
          {% set history = state_attr('sensor.layzspa_heater_history', 'today') %}
          {{ history | float / 3600 if history else 0 }}
      
      spa_estimated_cost_today:
        friendly_name: "Spa Estimated Cost Today"
        unit_of_measurement: '$'
        value_template: >
          {% set power = states('sensor.layzspa_estimated_power') | float %}
          {% set hours = states('sensor.spa_heating_time_today') | float %}
          {% set rate = 0.12 %}  # $ per kWh - adjust to your rate
          {{ (power * hours * rate / 1000) | round(2) }}
      
      spa_ready_in:
        friendly_name: "Spa Ready In"
        unit_of_measurement: 'min'
        value_template: >
          {% set current = states('sensor.layzspa_water_temperature') | float %}
          {% set target = state_attr('climate.layzspa', 'temperature') | float %}
          {% set heat_rate = 2 %}  # degrees per hour - adjust based on your spa
          {{ ((target - current) / heat_rate * 60) | round(0) if current < target else 0 }}